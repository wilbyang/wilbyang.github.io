---
layout: post
title:  "Golang Wire Dependency Injection"
date:   2025-04-20 21:16:02 +0200
categories: Golang
---

# Wire 依赖注入示范案例

下面是一个使用 `github.com/google/wire` 进行依赖注入的完整示例，展示如何构建一个简单的用户服务。

## 项目结构

```
.
├── cmd
│   └── main.go
├── go.mod
├── go.sum
└── internal
    ├── config
    │   └── config.go
    ├── db
    │   └── db.go
    ├── server
    │   └── server.go
    ├── user
    │   ├── user.go
    │   └── wire.go      # Wire 提供者定义文件
    └── wire
        └── wire_gen.go # Wire 生成的文件
```

## 代码实现

### 1. 首先定义基本组件

**internal/config/config.go**
```go
package config

type Config struct {
    DBConnectionString string
    ServerPort        int
}

func NewConfig() *Config {
    return &Config{
        DBConnectionString: "user:password@tcp(localhost:3306)/mydb",
        ServerPort:        8080,
    }
}
```

**internal/db/db.go**
```go
package db

import (
    "database/sql"
    "fmt"
    "internal/config"
    _ "github.com/go-sql-driver/mysql"
)

type DB struct {
    conn *sql.DB
}

func NewDB(cfg *config.Config) (*DB, error) {
    conn, err := sql.Open("mysql", cfg.DBConnectionString)
    if err != nil {
        return nil, fmt.Errorf("failed to open db: %w", err)
    }
    return &DB{conn: conn}, nil
}

func (d *DB) Close() error {
    return d.conn.Close()
}

func (d *DB) Conn() *sql.DB {
    return d.conn
}
```

**internal/user/user.go**
```go
package user

import (
    "database/sql"
    "internal/db"
)

type Repository interface {
    GetUser(id int) (string, error)
}

type Repo struct {
    db *sql.DB
}

func NewRepository(db *db.DB) Repository {
    return &Repo{db: db.Conn()}
}

func (r *Repo) GetUser(id int) (string, error) {
    // 实际实现会查询数据库
    return fmt.Sprintf("User%d", id), nil
}

type Service struct {
    repo Repository
}

func NewService(repo Repository) *Service {
    return &Service{repo: repo}
}

func (s *Service) GetUserName(id int) (string, error) {
    return s.repo.GetUser(id)
}
```

**internal/server/server.go**
```go
package server

import (
    "fmt"
    "internal/user"
    "net/http"
)

type Server struct {
    userService *user.Service
    port        int
}

func NewServer(userService *user.Service, port int) *Server {
    return &Server{
        userService: userService,
        port:        port,
    }
}

func (s *Server) Start() error {
    http.HandleFunc("/user", func(w http.ResponseWriter, r *http.Request) {
        id := 1 // 简化示例
        name, err := s.userService.GetUserName(id)
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }
        fmt.Fprintf(w, "User: %s", name)
    })
    
    return http.ListenAndServe(fmt.Sprintf(":%d", s.port), nil)
}
```

### 2. 定义 Wire 提供者

**internal/user/wire.go**
```go
// +build wireinject

package user

import (
    "internal/config"
    "internal/db"
    "internal/server"
    
    "github.com/google/wire"
)

// 定义提供者集合
var RepositorySet = wire.NewSet(
    NewRepository,
    wire.Bind(new(Repository), new(*Repo)),
)

var ServiceSet = wire.NewSet(
    NewService,
    RepositorySet,
)

var ServerSet = wire.NewSet(
    server.NewServer,
    ServiceSet,
)

// 初始化应用
func InitializeApp() (*server.Server, error) {
    wire.Build(
        config.NewConfig,
        db.NewDB,
        ServerSet,
    )
    return nil, nil
}
```

### 3. 生成 Wire 代码

运行以下命令生成依赖注入代码：
```bash
wire ./internal/user
```

这将生成 **internal/wire/wire_gen.go** 文件，内容类似于：

```go
// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package user

import (
    "internal/config"
    "internal/db"
    "internal/server"
)

// Injectors from wire.go:

func InitializeApp() (*server.Server, error) {
    configConfig := config.NewConfig()
    dbDB, err := db.NewDB(configConfig)
    if err != nil {
        return nil, err
    }
    repository := NewRepository(dbDB)
    service := NewService(repository)
    serverServer := server.NewServer(service, configConfig.ServerPort)
    return serverServer, nil
}
```

### 4. 主程序入口

**cmd/main.go**
```go
package main

import (
    "log"
    "internal/user"
)

func main() {
    app, err := user.InitializeApp()
    if err != nil {
        log.Fatalf("failed to initialize app: %v", err)
    }
    
    if err := app.Start(); err != nil {
        log.Fatalf("server error: %v", err)
    }
}
```

## 关键点说明

1. **提供者集合**：使用 `wire.NewSet` 将相关的提供者分组，便于重用
2. **接口绑定**：使用 `wire.Bind` 将接口与实现绑定
3. **依赖图**：Wire 会自动分析并生成正确的依赖初始化顺序
4. **错误处理**：Wire 会正确处理可能返回错误的提供者函数
5. **生成代码**：运行 `wire` 命令生成实际的依赖注入代码

## 进阶用法

1. **使用选项模式**：可以创建提供者选项来配置组件
2. **环境区分**：可以为不同环境（dev/test/prod）创建不同的提供者集合
3. **清理函数**：提供者可以返回清理函数，Wire 会确保正确调用

这个示例展示了 Wire 的基本用法，你可以根据项目需求扩展这个结构。